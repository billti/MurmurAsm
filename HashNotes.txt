## 2s complement

Signed integers generally use [2's complement](http://en.wikipedia.org/wiki/2%27s_complement) for representation and arithmetic.  Some basic principles of this (using signed 8-bit values for easy presentation)
 - 2s compliment allows for wrapping once overflow is discarded, e.g. decrement 0 = -1, increment 255 = 0.
 - As it wraps, and there are 256 possible values, a negative value has the same bit pattern as "_value_ + 256" positive value (and vice versa).
   - e.g. 10001100 is 140 (unsigned) or -116 (signed).  -116 + 256 = 140.
 - To multiply, sign-extend the bits to double the original width and multiple as usual, then discard the extra bits (you need twice as many for the result), e.g. for a signed 4-bit value, 2 * -7:

```
      0010       00000010
    * 1001  -> * 11111001
    
      1x         00000010
      2x        00000000
      4x       00000000
      8x      00000010
     ...     00000010
            00000010
           00000010
    +     00000010
    
                1111 0010 = -14 (bottom 4 bits = 2)
```

 - The multiplication method is the same if the value was unsigned, except you 0 extend instead of sign extend.  
 - As the sign extending happens above the original bit size, the lower 4 (original) bits are the same whether multiplied as signed or unsigned, but the bits above this differ
 - e.g. 2 * 9 (same 4-bit values as 2 * -7, but unsigned values):

```
      0010       00000010
    * 1001  -> * 00001001
    
                 00000010
                00000000
               00000000
              00000010
             00000000
            00000000
           00000000
    +     00000000
    
                0001 0010 = 18 (bottom 4 bits = 2)
```

 - This means if you multiple a 'n'-bit value by a 'n'-bit value, the bottom 'n'-bits of the result will be the same, regardless of the sign of the values.  The bits above 'n' however will differ.
 - The final value calculated may have the most significant bit set, indicating a negative value.  A hash should be positive.  Thus convert to the unsigned equivalent bit pattern (e.g. if h < 0, h = h + 2^n)

 - Multiplying a 32-bit value by a 32-bit value is a problem in JavaScript however, as this requires 64 bits to store the result, and the IEEE 754 number representation is only accurate for integers to 2^54.
 - This can be done as 2 x 16 bit multiplications: One operand (x) is split into the low 16-bits, then the high 16-bits.  
    - The high 16-bits are shifted right, then multiply the other operand, then this is shifted left 16-bits.  This is added to the low 16-bits * the operand.
    - This could still overflow when added, so bitwise-AND the lower 32-bits before adding.

### Example: 14 * 3
```
      1110        10        11
    * 0011  ->  0011   +  0011
    
                0000      0011
             + 0011    + 0011
     =          0110  +   1001 << 2 =  0110 + 100100 = 10 1010 = 42
```

function MulUint32(x, y) {
    // Keep all calculations below 2^53 so they don't lose precision in an IEEE 754 number.
    var l = ((x & 0xffff) * (y | 0)) | 0;    // 2^16 * 2^32 = 2^48.  Return as Int32.
    var h = ((x >>> 16) * (y | 0)) << 16;    // Shift down 16 bits (2^16) and multiply by 2^32 = 2^48.  Shift back up 16 (looses top 16 bits and returns Int32).
    return (h + l) >>> 0;                    // 2^32 + 2^32 = 2^33.  Unsigned right-shift by 0 to return as UInt32.
}

function RotateLeftUint32(val, bits) {
    // Negative value means rotate right.  Works as shift value is masked (i.e. -5 = 27)
    return ((val << bits) | (val >>> (32 - bits)));
}

    // Negative value means rotate right
    if(bits >= 0) {
        return ((val << bits) | (val >>> (32 - bits)));
    } else {
        return ((val >>> (0 - bits)) | (val << (32 + bits)));
    }
}




=========
## Hashing, JavaScript, and Numbers

There are a number of hashing algorithms that have been converted from C/C++ to JavaScript.  Many of these
don't take account of one important factor: Numbers in JavaScript are __not__ of type UInt32.

This can cause a few problems.  I will cover a couple of them here.

# Bitwise operators and ToInt32

The [Binary Bitwise Operators](http://es5.github.io/#x11.10), namely & (AND), | (OR), and ^ (XOR), and used extensively in most of these algorithms.  However while these do convert from the IEEE 754 [Number type](http://es5.github.io/#x8.5) that JavaScript uses to an Int32 value, this is a signed Int32 created via the [ToInt32](http://es5.github.io/#x9.5) algorithm in the spec, not the [ToUint32](http://es5.github.io/#x9.6) algorithm.

This is a little blurb

## Multiplying unsigned 32-bit integers

```javascript
function MulUint32(x, y) {
    // Keep all calculations below 2^53 so they don't lose precision in an IEEE 754 number.
    var l = ((x & 0xffff) * (y | 0)) | 0;    // 2^16 * 2^32 = 2^48.  Return as Int32.
    var h = ((x >>> 16) * (y | 0)) << 16;    // Shift down 16 bits (2^16) and multiply by 2^32 = 2^48.  Shift back up 16 (looses top 16 bits and returns Int32).
    return (h + l) >>> 0;                    // 2^32 + 2^32 = 2^33.  Unsigned right-shift by 0 to return as UInt32.
}
```

## Rotating unsigned 32-bit integers

```javascript
function RotateLeftUint32(val, bits) {
    // Negative value means rotate right.  Works as shift value is masked (i.e. -5 = 27)
    return ((val << bits) | (val >>> (32 - bits)));
}
```
=========


ToInt32

140 -> ToInt8

1. 140
2. 140
3. posInt = 140
4. int32bit = 140 mod 256 = 140
5. if 140 >= 128 return 140 - 256 = -116

usigned 140 = 10001100
signed -116 = 10001100

160 - > ToInt8

1. 260
2. 260
3. posInt = 260
4. int32bit = 260 mod 256 = 4
5. if 4 > 128 ... else 4

usigned 260 = 1,00000100
signed 4 =      00000100


-5 -> Int8

1. 2. 3. -5
4. int32bit = -5 mod 256 = 251
5. if 251 >= 128 then 251 - 256 = -5

val: 11111011

37 x -1 = -37
37 x 255 = 9435



130 * 145 = 18850     0100 1001 1010 0010
-126 * -111 = 13986   00 11 0110 1010 0010